{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatwoot.css\";\nconst BASE_URL = \"http://127.0.0.1:3000\"; // Your Chatwoot instance URL\nconst WEBHOOK_URL = \"http://localhost:3200/webhook\"; // Your backend endpoint\n\nconst ChatwootWidget = () => {\n  _s();\n  useEffect(() => {\n    // Global event listener for Chatwoot messages\n    const messageEventListener = event => {\n      var _event$detail, _event$detail2, _event$detail3;\n      // event.detail should contain the message details\n      console.log(\"Received chatwoot:message:received event:\", event.detail);\n\n      // Extract message content and conversation ID.\n      const content = ((_event$detail = event.detail) === null || _event$detail === void 0 ? void 0 : _event$detail.content) || \"\";\n      // Some versions might have conversation_id or conversationId, so we check both.\n      const conversationId = ((_event$detail2 = event.detail) === null || _event$detail2 === void 0 ? void 0 : _event$detail2.conversation_id) || ((_event$detail3 = event.detail) === null || _event$detail3 === void 0 ? void 0 : _event$detail3.conversationId);\n      console.log(\"Message content:\", content);\n      console.log(\"Conversation ID:\", conversationId);\n\n      // Proceed only if the message starts with \"/ask\"\n      if (content.trim().toLowerCase().startsWith(\"/ask\")) {\n        // Remove the \"/ask\" prefix to get the query text\n        const queryText = content.trim().substring(4).trim();\n        console.log(\"Extracted Query Text:\", queryText);\n\n        // Send the request to your backend webhook\n        axios.post(WEBHOOK_URL, {\n          payload: {\n            content\n          },\n          conversation: {\n            id: conversationId\n          }\n        }).then(response => {\n          console.log(\"Webhook triggered successfully.\", response.data);\n        }).catch(error => {\n          console.error(\"Error sending message to webhook:\", error);\n        });\n      }\n    };\n\n    // Add the global event listener\n    window.addEventListener(\"chatwoot:message:received\", messageEventListener);\n\n    // Load Chatwoot SDK by adding the SDK script dynamically.\n    (function (d, t) {\n      const scriptElem = d.createElement(t);\n      const firstScript = d.getElementsByTagName(t)[0];\n      scriptElem.src = BASE_URL + \"/packs/js/sdk.js\";\n      scriptElem.defer = true;\n      scriptElem.async = true;\n      firstScript.parentNode.insertBefore(scriptElem, firstScript);\n      scriptElem.onload = function () {\n        console.log(\"Chatwoot SDK loaded. Running configuration...\");\n        window.chatwootSDK.run({\n          websiteToken: \"BH9YQA553U754XQuLQmZYD5p\",\n          // Replace with your Chatwoot website token\n          baseUrl: BASE_URL\n          // We're using a global event listener, so we leave out the onMessage callback here.\n        });\n      };\n    })(document, \"script\");\n\n    // Cleanup: remove the event listener on component unmount.\n    return () => {\n      window.removeEventListener(\"chatwoot:message:received\", messageEventListener);\n    };\n  }, []);\n  return null;\n};\n_s(ChatwootWidget, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ChatwootWidget;\nexport default ChatwootWidget;\nvar _c;\n$RefreshReg$(_c, \"ChatwootWidget\");","map":{"version":3,"names":["React","useEffect","axios","BASE_URL","WEBHOOK_URL","ChatwootWidget","_s","messageEventListener","event","_event$detail","_event$detail2","_event$detail3","console","log","detail","content","conversationId","conversation_id","trim","toLowerCase","startsWith","queryText","substring","post","payload","conversation","id","then","response","data","catch","error","window","addEventListener","d","t","scriptElem","createElement","firstScript","getElementsByTagName","src","defer","async","parentNode","insertBefore","onload","chatwootSDK","run","websiteToken","baseUrl","document","removeEventListener","_c","$RefreshReg$"],"sources":["/Users/24khushi/Desktop/KBCHAT/client/src/Chatwoot.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatwoot.css\";\n\nconst BASE_URL = \"http://127.0.0.1:3000\"; // Your Chatwoot instance URL\nconst WEBHOOK_URL = \"http://localhost:3200/webhook\"; // Your backend endpoint\n\nconst ChatwootWidget = () => {\n  useEffect(() => {\n    // Global event listener for Chatwoot messages\n    const messageEventListener = (event) => {\n      // event.detail should contain the message details\n      console.log(\"Received chatwoot:message:received event:\", event.detail);\n\n      // Extract message content and conversation ID.\n      const content = event.detail?.content || \"\";\n      // Some versions might have conversation_id or conversationId, so we check both.\n      const conversationId =\n        event.detail?.conversation_id || event.detail?.conversationId;\n      \n      console.log(\"Message content:\", content);\n      console.log(\"Conversation ID:\", conversationId);\n\n      // Proceed only if the message starts with \"/ask\"\n      if (content.trim().toLowerCase().startsWith(\"/ask\")) {\n        // Remove the \"/ask\" prefix to get the query text\n        const queryText = content.trim().substring(4).trim();\n        console.log(\"Extracted Query Text:\", queryText);\n\n        // Send the request to your backend webhook\n        axios\n          .post(WEBHOOK_URL, {\n            payload: { content },\n            conversation: { id: conversationId },\n          })\n          .then((response) => {\n            console.log(\"Webhook triggered successfully.\", response.data);\n          })\n          .catch((error) => {\n            console.error(\"Error sending message to webhook:\", error);\n          });\n      }\n    };\n\n    // Add the global event listener\n    window.addEventListener(\"chatwoot:message:received\", messageEventListener);\n\n    // Load Chatwoot SDK by adding the SDK script dynamically.\n    (function (d, t) {\n      const scriptElem = d.createElement(t);\n      const firstScript = d.getElementsByTagName(t)[0];\n\n      scriptElem.src = BASE_URL + \"/packs/js/sdk.js\";\n      scriptElem.defer = true;\n      scriptElem.async = true;\n      firstScript.parentNode.insertBefore(scriptElem, firstScript);\n\n      scriptElem.onload = function () {\n        console.log(\"Chatwoot SDK loaded. Running configuration...\");\n        window.chatwootSDK.run({\n          websiteToken: \"BH9YQA553U754XQuLQmZYD5p\", // Replace with your Chatwoot website token\n          baseUrl: BASE_URL,\n          // We're using a global event listener, so we leave out the onMessage callback here.\n        });\n      };\n    })(document, \"script\");\n\n    // Cleanup: remove the event listener on component unmount.\n    return () => {\n      window.removeEventListener(\"chatwoot:message:received\", messageEventListener);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default ChatwootWidget;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}