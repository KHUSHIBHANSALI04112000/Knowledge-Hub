{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./Chatwoot.css\";\nconst BASE_URL = \"http://127.0.0.1:3000\"; // Your Chatwoot instance URL\nconst WEBHOOK_URL = \"http://localhost:3200/webhook\"; // Your backend endpoint\n\nconst ChatwootWidget = () => {\n  _s();\n  useEffect(() => {\n    // Set global Chatwoot settings before loading the SDK\n    window.chatwootSettings = {\n      autoOpen: true\n      // You can add more global settings here if needed.\n    };\n\n    // Optional: Listen for conversation updates if required\n    const conversationUpdateListener = event => {\n      console.log(\"chatwoot:conversation:updated event:\", event.detail);\n    };\n    window.addEventListener(\"chatwoot:conversation:updated\", conversationUpdateListener);\n\n    // Inject the Chatwoot SDK script dynamically\n    (function (d, t) {\n      const scriptElem = d.createElement(t);\n      const firstScript = d.getElementsByTagName(t)[0];\n      scriptElem.src = BASE_URL + \"/packs/js/sdk.js\";\n      scriptElem.defer = true;\n      scriptElem.async = true;\n      firstScript.parentNode.insertBefore(scriptElem, firstScript);\n      scriptElem.onload = function () {\n        console.log(\"Chatwoot SDK loaded. Running configuration...\");\n        window.chatwootSDK.run({\n          websiteToken: \"AH9YQA553U754XQuLQmZYD5p\",\n          // Replace with your token\n          baseUrl: BASE_URL,\n          onMessage: async message => {\n            console.log(\"onMessage callback fired with:\", message);\n            // Your processing code here if needed.\n          }\n        });\n      };\n    })(document, \"script\");\n\n    // Cleanup the event listener on component unmount\n    return () => {\n      window.removeEventListener(\"chatwoot:conversation:updated\", conversationUpdateListener);\n    };\n  }, []);\n  return null;\n};\n_s(ChatwootWidget, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ChatwootWidget;\nexport default ChatwootWidget;\nvar _c;\n$RefreshReg$(_c, \"ChatwootWidget\");","map":{"version":3,"names":["React","useEffect","BASE_URL","WEBHOOK_URL","ChatwootWidget","_s","window","chatwootSettings","autoOpen","conversationUpdateListener","event","console","log","detail","addEventListener","d","t","scriptElem","createElement","firstScript","getElementsByTagName","src","defer","async","parentNode","insertBefore","onload","chatwootSDK","run","websiteToken","baseUrl","onMessage","message","document","removeEventListener","_c","$RefreshReg$"],"sources":["/Users/24khushi/Desktop/KnowledgeHub/client/src/Chatwoot.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./Chatwoot.css\";\n\nconst BASE_URL = \"http://127.0.0.1:3000\"; // Your Chatwoot instance URL\nconst WEBHOOK_URL = \"http://localhost:3200/webhook\"; // Your backend endpoint\n\nconst ChatwootWidget = () => {\n  useEffect(() => {\n    // Set global Chatwoot settings before loading the SDK\n    window.chatwootSettings = {\n      autoOpen: true,\n      // You can add more global settings here if needed.\n    };\n\n    // Optional: Listen for conversation updates if required\n    const conversationUpdateListener = (event) => {\n      console.log(\"chatwoot:conversation:updated event:\", event.detail);\n    };\n\n    window.addEventListener(\n      \"chatwoot:conversation:updated\",\n      conversationUpdateListener\n    );\n\n    // Inject the Chatwoot SDK script dynamically\n    (function (d, t) {\n      const scriptElem = d.createElement(t);\n      const firstScript = d.getElementsByTagName(t)[0];\n\n      scriptElem.src = BASE_URL + \"/packs/js/sdk.js\";\n      scriptElem.defer = true;\n      scriptElem.async = true;\n      firstScript.parentNode.insertBefore(scriptElem, firstScript);\n\n      scriptElem.onload = function () {\n        console.log(\"Chatwoot SDK loaded. Running configuration...\");\n        window.chatwootSDK.run({\n          websiteToken: \"AH9YQA553U754XQuLQmZYD5p\", // Replace with your token\n          baseUrl: BASE_URL,\n          onMessage: async (message) => {\n            console.log(\"onMessage callback fired with:\", message);\n            // Your processing code here if needed.\n          },\n        });\n      };\n    })(document, \"script\");\n\n    // Cleanup the event listener on component unmount\n    return () => {\n      window.removeEventListener(\n        \"chatwoot:conversation:updated\",\n        conversationUpdateListener\n      );\n    };\n  }, []);\n\n  return null;\n};\n\nexport default ChatwootWidget;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,gBAAgB;AAEvB,MAAMC,QAAQ,GAAG,uBAAuB,CAAC,CAAC;AAC1C,MAAMC,WAAW,GAAG,+BAA+B,CAAC,CAAC;;AAErD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3BJ,SAAS,CAAC,MAAM;IACd;IACAK,MAAM,CAACC,gBAAgB,GAAG;MACxBC,QAAQ,EAAE;MACV;IACF,CAAC;;IAED;IACA,MAAMC,0BAA0B,GAAIC,KAAK,IAAK;MAC5CC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEF,KAAK,CAACG,MAAM,CAAC;IACnE,CAAC;IAEDP,MAAM,CAACQ,gBAAgB,CACrB,+BAA+B,EAC/BL,0BACF,CAAC;;IAED;IACA,CAAC,UAAUM,CAAC,EAAEC,CAAC,EAAE;MACf,MAAMC,UAAU,GAAGF,CAAC,CAACG,aAAa,CAACF,CAAC,CAAC;MACrC,MAAMG,WAAW,GAAGJ,CAAC,CAACK,oBAAoB,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC;MAEhDC,UAAU,CAACI,GAAG,GAAGnB,QAAQ,GAAG,kBAAkB;MAC9Ce,UAAU,CAACK,KAAK,GAAG,IAAI;MACvBL,UAAU,CAACM,KAAK,GAAG,IAAI;MACvBJ,WAAW,CAACK,UAAU,CAACC,YAAY,CAACR,UAAU,EAAEE,WAAW,CAAC;MAE5DF,UAAU,CAACS,MAAM,GAAG,YAAY;QAC9Bf,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;QAC5DN,MAAM,CAACqB,WAAW,CAACC,GAAG,CAAC;UACrBC,YAAY,EAAE,0BAA0B;UAAE;UAC1CC,OAAO,EAAE5B,QAAQ;UACjB6B,SAAS,EAAE,MAAOC,OAAO,IAAK;YAC5BrB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEoB,OAAO,CAAC;YACtD;UACF;QACF,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,EAAEC,QAAQ,EAAE,QAAQ,CAAC;;IAEtB;IACA,OAAO,MAAM;MACX3B,MAAM,CAAC4B,mBAAmB,CACxB,+BAA+B,EAC/BzB,0BACF,CAAC;IACH,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACb,CAAC;AAACJ,EAAA,CAnDID,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AAqDpB,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}